apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test-ingress
spec:
  backend:
    serviceName: pgadmin4-svc
    servicePort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc # この名前でpodから名前解決できる
spec:
  type: NodePort
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin4-svc # この名前でpodから名前解決できる
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: pgadmin4
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: postgres-dpl
spec:
  replicas: 1
  template:
    metadata:
      labels: # labels to select/identify the deployment
        app: postgres
    spec: # pod spec
      volumes:
      - name: volume-postgres
        persistentVolumeClaim:
          claimName: pvc-postgres
      containers:
      - name: postgres
        image: mdillon/postgis:10-alpine
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: postgres_admin_pass
        # postgres initialization fails if GCE disk is mounted
        # to '/var/lib/postgresql/data' which is postgres default data folder.
        # this is because GCE disk contains 'lost+fount' folder in its root.
        # so data folder neeed to be changed its subfolder(in this case, 'pgdata').
        #
        # SEE:
        # https://github.com/docker-library/postgres/issues/263
        # https://hub.docker.com/_/postgres/ (PGDATA section)
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata/"
        volumeMounts:
          - mountPath: "/var/lib/postgresql/data"
            name: volume-postgres
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: pgadmin4-dpl
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: pgadmin4
    spec:
      volumes:
      - name: volume-pgadmin4
        persistentVolumeClaim:
          claimName: pvc-pgadmin4
      containers:
      - name: pgadmin4
        image: dpage/pgadmin4
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        ports:
        - containerPort: 80
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: "some@dummy.com"
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: pgadmin4_pass
        volumeMounts:
          - mountPath: "/var/lib/pgadmin"
            name: volume-pgadmin4
        # Ingressのバックエンドとして使うためには必須
        readinessProbe:
          httpGet:
            path: /login?next=%2F
            port: 80
          initialDelaySeconds: 15
          timeoutSeconds: 1
---
# postgres用PV
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-postgres
spec:
  storageClassName: ""
  capacity:
    storage: 10G
  accessModes:
    - ReadWriteOnce # 1台のポッドにRWでマウント
  gcePersistentDisk:
    pdName: disk-for-postgres # 手動で作成したDiskの名前。PV/PVCを削除してもディスクは削除されない。
    fsType: ext4
---
# pgadmin用PV
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-pgadmin4
spec:
  storageClassName: ""
  capacity:
    storage: 10G
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: disk-for-pgadmin4
    fsType: ext4
---
# postgres用PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-postgres
spec:
  # It's necessary to specify "" as the storageClassName
  # so that the default storage class won't be used, see
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  storageClassName: ""
  volumeName: pv-postgres
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10G
---
# pgadmin用PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-pgadmin4
spec:
  storageClassName: ""
  volumeName: pv-pgadmin4
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10G